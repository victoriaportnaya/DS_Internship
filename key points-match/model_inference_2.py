# -*- coding: utf-8 -*-
"""model_inference_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uOVZtV3Mc1j-vySS6bxYbIaxEmPDQr2u
"""

import os
import sys
import cv2
import numpy as np
import torch
from models.matching import Matching
from models.utils import read_image, make_matching_plot
import matplotlib.pyplot as plt

# Add SuperGluePretrainedNetwork to the system path
sys.path.append('./SuperGluePretrainedNetwork')

def main():
    # Load and preprocess the images
    image0_path = '/path/to/your/image0.png'  # Update with your image paths
    image1_path = '/path/to/your/image1.png'

    image0_gray = cv2.imread(image0_path, cv2.IMREAD_GRAYSCALE)
    image1_gray = cv2.imread(image1_path, cv2.IMREAD_GRAYSCALE)

    if image0_gray is None or image1_gray is None:
        print("Error loading images.")
        return

    # Resize images
    image0_gray = cv2.resize(image0_gray, (640, 480))
    image1_gray = cv2.resize(image1_gray, (640, 480))

    # Configure the model
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    config = {
        'superpoint': {
            'nms_radius': 4,
            'keypoint_threshold': 0.005,
            'max_keypoints': 1024,
        },
        'superglue': {
            'weights': 'outdoor',
            'sinkhorn_iterations': 20,
            'match_threshold': 0.2,
        }
    }
    matching = Matching(config).eval().to(device)

    # Perform inference
    inp0 = torch.from_numpy(image0_gray / 255.).float()[None, None].to(device)
    inp1 = torch.from_numpy(image1_gray / 255.).float()[None, None].to(device)
    with torch.no_grad():
        pred = matching({'image0': inp0, 'image1': inp1})
    keypoints0 = pred['keypoints0'][0].cpu().numpy()
    keypoints1 = pred['keypoints1'][0].cpu().numpy()
    matches = pred['matches0'][0].cpu().numpy()
    confidence = pred['matching_scores0'][0].cpu().numpy()

    # Filter matches
    valid = matches > -1
    mkpts0 = keypoints0[valid]
    mkpts1 = keypoints1[matches[valid]]
    mconf = confidence[valid]

    color = plt.cm.jet(mconf)

    # Create output directory if it doesn't exist
    output_dir = './output'
    os.makedirs(output_dir, exist_ok=True)

    # Generate the matching plot
    output_path = os.path.join(output_dir, 'matches_inference.png')
    make_matching_plot(
        image0_gray,
        image1_gray,
        keypoints0, keypoints1, mkpts0, mkpts1, color,
        text=['SuperGlue Feature Matching', f'Keypoints: {len(keypoints0)}:{len(keypoints1)}', f'Matches: {len(mkpts0)}'],
        path=output_path, show_keypoints=True, opencv_display=False
    )
    print(f"Inference result saved to {output_path}")

if __name__ == '__main__':
    main()